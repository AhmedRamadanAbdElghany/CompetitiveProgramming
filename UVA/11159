///________________In THE NAME OF ALLAH________________\\\
//#include <bits/stdc++.h>
#include <bits/stdc++.h>
#include <string>
#include <stdio.h>
#include <string.h>
#define all(v)          v.begin(),v.end()
#define allr(v)         v.rbegin(),v.rend()
#define rep(i,m)        for(int i=0;i<m;i++)
#define REP(i,k,m)      for(int i=k;i<m;i++)
#define repd(i,m)        for(int i=m;i>=0;i--)
#define P(x)				cout<<#x<<" = { "<<x<<" }\n"
#define mem(a,b)        memset(a,b,sizeof(a))
#define mp              make_pair
#define pb              push_back
#define SORT(ptr , k )  sort ( ptr , ptr + k );
#define OO ((ll)1e12)
#define ooo -100000000
#define small  INT_MIN;
#define big  INT_MAX;
// #undef to remove macro
#include <cmath>
#include <complex>

using namespace std;
typedef long long ll;
typedef double db;
typedef long double   	  ld;
typedef vector<int>       vi;
typedef vector<bool>       vb;
typedef vector<double>    vd;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef bitset<20> MASK;
//typedef  pair < int, string > point ;
#define mo 1000000009
#define INF 10000
#define sz(v)          ((int)((v).size()))
//std::ios_base::sync_with_stdio(false); means  i will not deal with c lang that will speed
const int oo = (int) 1e9;
const double eps = 1e-7;
#define md 1000000007
#define black 0;
#define white 1;
const int MAXN=1e5+10;
int dx[] = {1, 0, 0, -1, -1, -1, 1, 1};
int dy[] = {0, 1, -1, 0, 1, -1, 1, -1};


const double PI  = acos(-1.0);

typedef complex<double> point;

#define X real()
#define Y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
//#define polar(r,ang)            ((r)*exp(point(0,ang)))  ==> Already added in c++11
#define rotateO(p,ang)          ((p)*exp(point(0,ang)))
#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)
#define reflectO(v,m)  (conj((v)/(m))*(m))
const double EPS = 1e-9;

int path [1000], visited[500];
int n, m ;
int adj[500][500];
bool  getPathusingBfs  (int s, int t )
{
    mem(path, -1);
    mem (visited, 0 );
    queue < int > q ;
    q.push(s);
    visited[s] = 1 ;
    path[s] = -1 ;

    while(!q.empty() )
    {
        int u = q.front();
        q.pop();
        if ( u == t ) return 1 ;
        rep( i, n+m+10 )
        {

            if (!visited[i] && adj[u][i] > 0 )
                q.push(i), path[i] = u, visited[i] = 1 ;
        }
    }
    return 0 ;
}


int maxflow (int s, int t )
{
    int ans = 0;
    while( 1 )
    {
        int u = getPathusingBfs ( s, t );

        if ( !u ) break;
        else
        {
            int y = t, maxflo = (int ) 1e8 ;
            while(y != s )
            {
                int u = path[y];
                maxflo = min (maxflo, adj[u][y]);
                y = u;
            }
            ans += maxflo ;
            y = t ;
            while(y != s )
            {
                int u = path[y];
                adj[u][y] -= maxflo;
                adj[y][u] += maxflo ;
                y = u;
            }
        }
    }
    return ans ;
}

int main()
{
    //    freopen("in.txt","r",stdin);
//    freopen("out.txt","w",stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int aa[109],a[109];
    int tc ;
    cin >> tc;
    rep( l, tc )
    {
        mem(adj, 0 );
        cin >> n ;

        rep(i, n )
        cin >> a[i];
        cin >> m ;
        rep(i, m )
        cin >> aa[i];

        rep( i, n )
        rep(j, m )
            if (a[i] != 0)
            {
                if (aa[j] == 0 || aa[j] % a[i] == 0)
                    adj[i+1][n+j+1] = 1 ;
            }
            else if (a[i] == 0 && aa[j] == 0)
            {
                adj[i+1][n+j+1] = 1 ;
            }
        rep(j, m )
        adj[n+j+1][n+m+2] = 1 ;
        rep(j, n )
        adj[0][j+1] = 1 ;

        cout << "Case "<<l+1<<": "<<maxflow( 0, n+m+2 ) << endl;
    }
}
