#include <bits/stdc++.h>
#define all(v)          v.begin(),v.end()
#define allr(v)         v.rbegin(),v.rend()
#define rep(i,m)        for(int i=0;i<m;i++)
#define REP(i,k,m)      for(int i=k;i<m;i++)
#define repd(i,m)        for(int i=m;i>=0;i--)
#define P(x)                cout<<#x<<" = { "<<x<<" }\n"
#define mem(a,b)        memset(a,b,sizeof(a))
#define mp              make_pair
#define pb              push_back
#define OO ((ll)1e12)
#define ooo -100000000
#define small  INT_MIN;
#define big  INT_MAX;
using namespace std;
typedef long long ll;
typedef double db;
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<bool>       vb;
typedef vector<double>    vd;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef bitset<20> MASK;
#define INF 10000
#define sz(v)          ((int)((v).size()))
//std::ios_base::sync_with_stdio(false); means  i will not deal with c lang that will speed
const int oo = (int) 1e9;
const double PI = 2 * acos(0.0);
const double eps = 1e-7;
#define pi 1000000007
#define black 0;
#define white 1;
const int MAXN=1e5+10;

int dx[] = {1, 0, 0, -1, -1, -1, 1, 1};
int dy[] = {0, 1, -1, 0, 1, -1, 1, -1};

bool in[200000];
int main()
{
    priority_queue < pair < int , int  > > q ;
    vector < deque < int > > adj ;
    int n, k, p, a, aa[500009];
    int tc ;
    cin >> tc ;
    while(tc--)
    {
        cin >> n >> k >> p ;
        mem(in, 0 );

        int cnt = 0;
        adj.clear();
        adj.resize(n+1);
        while(q.empty() == 0 )
            q.pop();

        rep( i, p )
        cin >> aa[i] ;

        rep( i, p )
        adj[aa[i]].pb(i); // for every value but all index .

        rep( i, n  )
        adj[i+1].push_back(p+2);  // to tell me that all no item with these value will appeare anymore . 
        rep( i, p )
        {
            a = aa[i];
            if ( in[a] )   // if the same value exist before 
            {
                adj[a].pop_front();
                q.push({adj[a].front() , a});
                continue;
            }
            if ( cnt < k )      // if I am not fill all space with toys 
            {
                adj[a].pop_front();
                q.push({adj[a].front() , a});
                cnt++;
                in[a] = 1 ;
            }
            else  
            {
                int u = q.top().first;
                int idx = q.top().second;
                q.pop();
                in[idx]= 0 ;
                adj[a].pop_front();
                q.push({adj[a].front(),a});
                cnt++;
                in[a] = 1 ;
            }
        }
        cout << cnt << endl;

    }
}
