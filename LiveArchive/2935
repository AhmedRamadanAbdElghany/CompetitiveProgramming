#include <bits/stdc++.h>
#define all(v)          v.begin(),v.end()
#define allr(v)         v.rbegin(),v.rend()
#define rep(i,m)        for(int i=0;i<m;i++)
#define REP(i,k,m)      for(int i=k;i<m;i++)
#define repd(i,m)        for(int i=m;i>=0;i--)
#define P(x)                cout<<#x<<" = { "<<x<<" }\n"
#define mem(a,b)        memset(a,b,sizeof(a))
#define mp              make_pair
#define pb              push_back
#define OO ((ll)1e12)
#define ooo -100000000
#define small  INT_MIN;
#define big  INT_MAX;
using namespace std;
typedef long long ll;
typedef double db;
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<bool>       vb;
typedef vector<double>    vd;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef bitset<20> MASK;
#define INF 10000
#define sz(v)          ((int)((v).size()))
const int oo = (int) 1e9;
const double PI  = acos(-1.0);

typedef complex<double> point;

#define X real()
#define Y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
//#define polar(r,ang)            ((r)*exp(point(0,ang)))  ==> Already added in c++11
#define rotateO(p,ang)          ((p)*exp(point(0,ang)))
#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)
#define reflectO(v,m)  (conj((v)/(m))*(m))
const double eps = 1e-7;
using namespace std;
const double EPS = 1e-9;
/*
the problem need to find if two trees are isomorphic or not 
so we need to comaring two objects so get canonical form of the two objects and comparing them 
as we didn't have the tree represented as a parent with his childeren in a relation .
we get every branch from the root and then shrink this branch with 2 and so on .
*/




string s ;
string canonicalform(int st, int en )
{
    vector<string> childern;

    int cnt = 0,  cnt2 = 0, y = st  ;

    REP(j, st, en + 1 )
    {
        if (s[j] == '(')
            cnt++;
        else
            cnt--;

        if (cnt == 0 )
        {
            string node = canonicalform( y+1,j-1 );
            childern.pb(node);
            y=j+1;
        }
    }
    string nodeRep = "(";
    sort( all(childern) );
    rep(k, sz(childern))
    nodeRep += childern[k];
    nodeRep+=")";
    return nodeRep;
}




int main()
{

    string s1, s2 ;
    int tc;
    cin >> tc;
    while(tc--)
    {
        cin >> s1 >> s2;
        if (sz(s1) != sz(s2))
            puts("different");

        else
        {

            rep( i, sz(s1))
            if (s1[i] == '0')
                s1[i] ='(';
            else
                s1[i] = ')';

            rep( i, sz(s1))
            if (s2[i] == '0')
                s2[i] ='(';
            else
                s2[i] = ')';


            s = s1;
            string aa =canonicalform(0, sz(s) - 1 );
            string t   (aa.begin()+1,aa.end()-1);
            s= s2;
            aa  = canonicalform(0, sz(s) - 1 );
            string l   (aa.begin()+1,aa.end()-1);
            if( t == l )
                puts("same");

            else
                puts("different");

        }
    }


}
