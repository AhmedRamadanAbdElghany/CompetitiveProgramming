#include <bits/stdc++.h>
#define all(v)          v.begin(),v.end()
#define allr(v)         v.rbegin(),v.rend()
#define rep(i,m)        for(int i=0;i<m;i++)
#define REP(i,k,m)      for(int i=k;i<m;i++)
#define repd(i,m)        for(int i=m;i>=0;i--)
#define P(x)                cout<<#x<<" = { "<<x<<" }\n"
#define mem(a,b)        memset(a,b,sizeof(a))
#define mp              make_pair
#define pb              push_back
#define OO ((ll)1e12)
#define ooo -100000000
#define small  INT_MIN;
#define big  INT_MAX;

using namespace std;
typedef long long ll;
typedef double db;
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<bool>       vb;
typedef vector<double>    vd;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;
typedef bitset<20> MASK;
#define INF 10000
#define sz(v)          ((int)((v).size()))
//std::ios_base::sync_with_stdio(false); means  i will not deal with c lang that will speed
const int oo = (int) 1e9;
const double PI = 2 * acos(0.0);
const double eps = 1e-7;
#define pi 1000000007
#define black 0;
#define white 1;
const int MAXN=1e5+10;
typedef complex<double> point;

#define X real()
#define Y imag()
#define angle(a)                (atan2((a).imag(), (a).real()))
#define vec(a,b)                ((b)-(a))
#define same(p1,p2)             (dp(vec(p1,p2),vec(p1,p2)) < EPS)
#define dp(a,b)                 ( (conj(a)*(b)).real() )	// a*b cos(T), if zero -> prep
#define cp(a,b)                 ( (conj(a)*(b)).imag() )	// a*b sin(T), if zero -> parllel
#define length(a)               (hypot((a).imag(), (a).real()))
#define normalize(a)            (a)/length(a)
//#define polar(r,ang)            ((r)*exp(point(0,ang)))  ==> Already added in c++11
#define rotateO(p,ang)          ((p)*exp(point(0,ang)))
#define rotateA(p,ang,about)  (rotateO(vec(about,p),ang)+about)
#define reflectO(v,m)  (conj((v)/(m))*(m))
const double EPS = 1e-9;

/*
concate every string that consist of one char with another strings that start with this char and end with it .
then try every string to start with and take with you last char in the last string you take .
if you find a string start with the last char and valid in no chars exist before then take it if there are many then you can not continue .
if there are not any string start with prev chars try to take string thar end with chars that any other string didn't start with . 
*/


bool vis[26];
bool take[55];
vector < string > data;
int many = 0  ;
bool same[55];
bool kk [55] ;
string construct ;
int fun(char prev, int num,string tt )
{
    if (num == sz(data )) // base case
    {
        construct = tt ;
        return 1 ;
    }

    int cnt = 0, idx = -1;
    rep( i, sz(data)) // find first words start with the prev .
    if ( take[i] == 0 && data[i][0] == prev  )
    {
        cnt++,idx = i ;
    }
    if (cnt > 1 ) // has many word start with prev char so this is impossible
        return 0 ;
    if (idx != -1 )//  find just one start with prev and has another chars .
    {
        take[idx] = 1 ;
        int j = 0;
        while(j < sz(data[idx]) && prev == data[idx][j]) // discard chars same as prev
            j++;

        REP( k, j, sz(data[idx])) // if any char exist before
        if (vis[data[idx][k]-'a'] == 1 )
            return 0 ;

        REP( k, j, sz(data[idx]))
        vis[data[idx][k]-'a'] = 1  ;

        tt+= data[idx];
        return fun(data[idx][sz(data[idx])-1], num + 1, tt ); // this valid word take it
    }

    cnt = 0,idx = -1 ;
    rep( i, sz(data)) // validate to remainder strings to terminate early
    if (take[i] == 0 && data[i][0] != prev)
    {
        rep( j, sz(data[i]))
        if ( vis[data[i][j]-'a'] == 1) // check there chars
            return 0 ;
    }

// try to take valid word start with another prev char
    rep(l, sz(data))
    if (take[l] == 0 )
    {
        int uu = 1 ;
        rep(k, sz(data))
        // if string start with chars that any string don't end with it will be valid
        if ( l != k && take[k] == 0  && data[k][sz(data[k])-1] == data[l][0]  )
        {
            uu = 0 ;
            break ;
        }

        if (uu )
            cnt++, idx = l ;
    }
    if (cnt >= 2 ) // there are many string to take
        many = 1 ;
    if ( cnt )
    {
        // validate take string
        rep( j, sz(data[idx]))
        vis[data[idx][j]-'a'] = 1 ;
        tt += data[idx];
        take[idx] = 1;
        return fun( data[idx][sz(data[idx])-1], num + 1, tt );
    }
    return 0 ;
}

class GroupedWord
{
public :
    string restore(vector <string> parts)
    {
        data = parts ;
        // find string consist of one chars
        rep( i, sz(data))
        if(sz(data[i]) == 1 )
            same[i] = 1 ;
        else
        {
            int fl = 1 ;
            rep( j, sz(data[i])-1 )
            if (data[i][j] != data[i][j+1])
            {
                fl = 0;
                break ;
            }
            if (fl )
                same[i] = 1 ;
        }

        mem(kk, 0 );

// concatenation two strings that first end with chars and the second start with
        rep( i, sz(data))
        rep( j, sz(data))
        if (i != j && kk[i] == 0 && same[j] == 1 && kk[j] == 0  && data[i][sz(data[i]) -1 ] == data[j][0])
            data[i] += data[j], kk[j] = 1 ;

// concatenation two strings that first start with chars and the second start with
        rep( i, sz(data))
        if (same[i] == 1 && kk[i] == 0 )
            rep( j, sz(data))
            if (i != j && kk[j] == 0 && same[j] == 0  && data[i][0] == data[j][0])
                data[i] += data[j], kk[j] = 1 ;
        parts = data ;
        data.clear();
        rep( i, sz(parts))
        if (kk[i] == 0 )
            data.pb(parts[i]);

        rep( i, sz(data)) // validate to all string that have no same chars in non consecutive sequence.
        {
            mem(vis, 0 );
            rep( j, sz(data[i]) )
            if (j+1 < sz(data[i]) && data[i][j] == data[i][j+1]) continue ;
            else if (vis[data[i][j]-'a'] == 1 )
                return "IMPOSSIBLE";
            else
                vis[data[i][j]-'a'] = 1 ;
        }


        set<string > ss;

        int ans = 0 ;
        rep ( i, sz(data))   // take first word
        {
            mem(take, 0);
            take[i] = 1 ;
            //      int fl = 0 ;
            mem(vis, 0 );
            rep( j, sz(data[i]))
            vis[data[i][j]-'a'] = 1;

            if ( fun(data[i][sz(data[i])-1],1, data[i]))
            {
                if (many)
                    ans = 1 ;
                ss.insert(construct) ;
            }
        }

        string ret = construct ;
        if (sz(ss) > 1 || ans )
            ret = "MANY";
        else if (sz(ss) == 0 )
            ret = "IMPOSSIBLE";
        return ret ;
    }
};
/*
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    GroupedWord kl;
    cout <<  kl.restore(
    {"dd", "de", "cd", "ab", "bc", "bb"}

    );
    return 0;
}
*/
